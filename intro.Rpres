<style type="text/css">
.small-code pre code {
   font-size: 1.1em;
}
</style>

Intro to ggplot2
========================================================
author: Max Joseph & Joe Mihaljevic
font-family: Helvetica
date: Oct 1 2013

What is ggplot2?
========================================================

R package for visualization based on the grammar of graphics.

Developed primarily by Hadley Wickham

 - [ggplot2 website](http://ggplot2.org/)

 - [source code](https://github.com/hadley/ggplot2)

Grammar of graphics
========================================================

A syntactic and conceptual framework for producing graphics.

![](http://www.r-bloggers.com/wp-content/uploads/2006/10/2006-06-22_useR2006_GrammarGraphics_0387245448.02.LZZZZZZZ1.jpg)

Implementation in ggplot2
========================================================
One syntactic framework for many plots

^ major advantage over `base` graphics

Elements
========================================================
Plots emerge from layered components:
- data (= geometric objects)

Elements
========================================================
Plots emerge from layered components:
- data (= geometric objects)
- axes (scales)

Elements
========================================================
Plots emerge from layered components:
- data (= geometric objects)
- axes (scales)
- grouping

Elements
========================================================
Plots emerge from layered components:
- data (= geometric objects)
- axes (scales)
- grouping
- coordinate systems

Getting started 
==========================
class: small-code
```{r eval=FALSE}
install.packages("ggplot2")
```


Data
==============
class: small-code
ggplot2 uses data frames
```{r}
# load data
data(msleep)

# check object class
class(msleep)
```

Scatterplot
==========================================
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p <- ggplot(msleep, aes(x=bodywt, y=brainwt)) + geom_point()
p
```

Aesthetics & geoms
==========================================
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
ggplot(msleep) + geom_point(aes(x=bodywt, y=brainwt))
```

Axis scaling
===================================
class: small-code
```{r fig=TRUE, fig.width=12, fig.height=6, fig.align="center",}
p <- p + scale_y_log10() + scale_x_log10()
p
```

Black and white theme
=======
class: small-code
```{r fig=TRUE, fig.width=12, fig.height=6, fig.align="center"}
p <- p + theme_bw()
p
```

Classic theme
=============
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p + theme_classic()
```

Smoothing
============
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p + stat_smooth()
```

OLS regression line
====================
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p <- p + stat_smooth(method="lm")
p
```

Faceting
=============
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p + facet_wrap(~vore)
```

Color
======
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p + geom_point(aes(color=vore), size=3)
```


Line plots
==============
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
data(co2)
ggplot(data.frame(co2), aes(x=1:length(co2), y=co2)) + geom_line()
```

Strip plots
===========
class: small-code
```{r fig=T, fig.align="center", fig.width=12, fig.height=6}
p2 <- ggplot(msleep, aes(x=conservation, y=awake)) + geom_point()
p2 
```

Box plots
=========
class: small-code
```{r fig=T, fig.align="center", fig.width=12, fig.height=6}
ggplot(msleep, aes(x=conservation, y=awake)) + geom_boxplot()
```

Dynamite plots
==============
Please don't.   
![](http://i.imgur.com/A82Bvrg.png)

Dynamite plots
==============
class: small-code
```{r fig=T, fig.align="center", fig.width=12, fig.height=6}
sumd <- aggregate(awake ~ conservation, data=msleep, FUN=mean)
sumd$sd <- aggregate(awake ~ conservation, data=msleep, FUN=sd)[,2]
limits <- aes(ymax = awake + sd, ymin = awake - sd)
p3 <- ggplot(sumd, aes(x=conservation, y=awake)) + geom_bar(fill="grey") + theme_classic()
p3
```

Dynamite plots
==============
class: small-code
```{r fig=T, fig.align="center", fig.width=12, fig.height=6}
p3 + geom_errorbar(limits, width=0.25)
```

Combining plot types
====================
class: small-code
```{r fig=T, fig.align="center", fig.width=15, fig.height=6}
require(gridExtra)
grid.arrange(p, p2 + theme_bw(), ncol=2)
```

Other aesthetics
==============================
- shape
- size
- linetype
- alpha
- fill

All can be mapped to variables

Other geoms
===========
- jitter
- text
- segment
- polygon
- rect
- rug
- step
- density
- contour


Extensions
==========
- ggdendro
- ggmcmc
- ggmap
- GGally
- ggROC
- ggthemes

Questions?
==========

Your turn
=========
### `msleep`
1) Make a scatterplot of `sleep_total` vs. `sleep_rem`   
2) Make point size proportional to log(body mass)   
3) Add a OLS regression line   
4) Color-code the points according to `vore`. Does the scaling of REM & total sleep differ w/ diet?   

### `movies`
1) Plot a histogram of `rating`    
2) Plot the overall density of `rating`, changing your code as little as possible   
3) Plot the density of `rating` for each `mpaa` level (using color, fill, or facet)

